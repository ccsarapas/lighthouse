[{"path":"https://ccsarapas.github.io/lighthouse/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 lighthouse authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Casey Sarapas. Author, maintainer.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sarapas C (2022). lighthouse: Utility Functions Lighthouse Institute Projects. https://github.com/ccsarapas/lighthouse, https://ccsarapas.github.io/lighthouse/.","code":"@Manual{,   title = {lighthouse: Utility Functions for Lighthouse Institute Projects},   author = {Casey Sarapas},   year = {2022},   note = {https://github.com/ccsarapas/lighthouse, https://ccsarapas.github.io/lighthouse/}, }"},{"path":"https://ccsarapas.github.io/lighthouse/index.html","id":"lighthouse","dir":"","previous_headings":"","what":"Utility Functions for Lighthouse Institute Projects","title":"Utility Functions for Lighthouse Institute Projects","text":"lighthouse package includes various utility functions used staff Lighthouse Institute, division Chestnut Health Systems.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Utility Functions for Lighthouse Institute Projects","text":"Install lighthouse package running:","code":"remotes::install_github(\"ccsarapas/lighthouse\")"},{"path":"https://ccsarapas.github.io/lighthouse/reference/accuracy_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute common accuracy and agreement metrics — accuracy_stats","title":"Compute common accuracy and agreement metrics — accuracy_stats","text":"Given vector true_values one vectors test values (passed ...), computes sensitivity, specificity, positive predictive value (PPV), negative predictive value (NPV), Cohen's kappa.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/accuracy_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute common accuracy and agreement metrics — accuracy_stats","text":"","code":"accuracy_stats(.data, true_values, ..., include_counts = FALSE)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/accuracy_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute common accuracy and agreement metrics — accuracy_stats","text":"","code":"# create example data w predictors with different properties: ex_data <- tibble::tibble(   actual = rbinom(250, 1, .3),                                   # 250 cases, p(outcome) = .3   prediction1 = ifelse(runif(250) <= .05, 1L - actual, actual), # 5% error rate   prediction2 = ifelse(runif(250) <= .15, 1L - actual, actual), # 15% error rate   prediction3 = ifelse(runif(250) <= .35, 1L - actual, actual), # 35% error rate   prediction4 = ifelse(runif(250) <= .15, 1L, actual),          # 15% with positive bias   prediction5 = ifelse(runif(250) <= .15, 0L, actual)           # 15% with negative bias )  # testing predicted v actual values ex_data %>%   accuracy_stats(actual, prediction1) #> # A tibble: 1 × 7 #>   Predictor       n Kappa Sensitivity Specificity   PPV   NPV #>   <fct>       <dbl> <dbl>       <dbl>       <dbl> <dbl> <dbl> #> 1 prediction1   250 0.897       0.947       0.960 0.911 0.977  # can test multiple predictors simultaneously ex_data %>%   accuracy_stats(actual, prediction1:prediction5) #> # A tibble: 5 × 7 #>   Predictor       n Kappa Sensitivity Specificity   PPV   NPV #>   <fct>       <dbl> <dbl>       <dbl>       <dbl> <dbl> <dbl> #> 1 prediction1   250 0.897       0.947       0.960 0.911 0.977 #> 2 prediction2   250 0.663       0.868       0.839 0.702 0.936 #> 3 prediction3   250 0.211       0.605       0.632 0.418 0.786 #> 4 prediction4   250 0.800       1           0.868 0.768 1     #> 5 prediction5   250 0.932       0.908       1     1     0.961  # if `include_counts` = TRUE, will also return n of false positives, # false negatives, etc., as well as and observed and expected % agreement ex_data %>%   accuracy_stats(actual, prediction1:prediction5, include_counts = TRUE) #> # A tibble: 5 × 13 #>   Predictor       n    TP    FP    TN    FN pAgreeObserved pAgreeExpected Kappa #>   <fct>       <dbl> <int> <int> <int> <int>          <dbl>          <dbl> <dbl> #> 1 prediction1   250    72     7   167     4          0.956          0.572 0.897 #> 2 prediction2   250    66    28   146    10          0.848          0.549 0.663 #> 3 prediction3   250    46    64   110    30          0.624          0.524 0.211 #> 4 prediction4   250    76    23   151     0          0.908          0.541 0.800 #> 5 prediction5   250    69     0   174     7          0.972          0.588 0.932 #> # … with 4 more variables: Sensitivity <dbl>, Specificity <dbl>, PPV <dbl>, #> #   NPV <dbl>"},{"path":"https://ccsarapas.github.io/lighthouse/reference/add_empty_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"Add empty rows — add_empty_rows","title":"Add empty rows — add_empty_rows","text":"Adds number empty rows passed .nrows (default 1) positions passed ... Vectorized ., ., .nrows.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/add_empty_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add empty rows — add_empty_rows","text":"","code":"add_empty_rows(.data, .before = NULL, .after = NULL, .nrows = 1)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/add_header.html","id":null,"dir":"Reference","previous_headings":"","what":"Add header rows to a table — add_header","title":"Add header rows to a table — add_header","text":"Inserts header rows using unique values .","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/add_header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add header rows to a table — add_header","text":"","code":"add_header(   data,   from,   to,   skip_single_row = FALSE,   indent = \"\",   drop_from = TRUE )"},{"path":"https://ccsarapas.github.io/lighthouse/reference/add_header.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add header rows to a table — add_header","text":"","code":"dplyr::starwars %>%   head(13) %>%   dplyr::arrange(species) %>%   add_header(from = species, to = name, indent = \"  \") #> # A tibble: 16 × 13 #>    name     height  mass hair_color skin_color eye_color birth_year sex   gender #>    <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr>  #>  1 \"Droid\"      NA    NA NA         NA         NA              NA   NA    NA     #>  2 \"  C-3P…    167    75 NA         gold       yellow         112   none  mascu… #>  3 \"  R2-D…     96    32 NA         white, bl… red             33   none  mascu… #>  4 \"  R5-D…     97    32 NA         white, red red             NA   none  mascu… #>  5 \"Human\"      NA    NA NA         NA         NA              NA   NA    NA     #>  6 \"  Luke…    172    77 blond      fair       blue            19   male  mascu… #>  7 \"  Dart…    202   136 none       white      yellow          41.9 male  mascu… #>  8 \"  Leia…    150    49 brown      light      brown           19   fema… femin… #>  9 \"  Owen…    178   120 brown, gr… light      blue            52   male  mascu… #> 10 \"  Beru…    165    75 brown      light      blue            47   fema… femin… #> 11 \"  Bigg…    183    84 black      light      brown           24   male  mascu… #> 12 \"  Obi-…    182    77 auburn, w… fair       blue-gray       57   male  mascu… #> 13 \"  Anak…    188    84 blond      fair       blue            41.9 male  mascu… #> 14 \"  Wilh…    180    NA auburn, g… fair       blue            64   male  mascu… #> 15 \"Wookie…     NA    NA NA         NA         NA              NA   NA    NA     #> 16 \"  Chew…    228   112 brown      unknown    blue           200   male  mascu… #> # … with 4 more variables: homeworld <chr>, films <list>, vehicles <list>, #> #   starships <list>"},{"path":"https://ccsarapas.github.io/lighthouse/reference/any-all-in.html","id":null,"dir":"Reference","previous_headings":"","what":"Test whether multiple values are in a vector — any-all-in","title":"Test whether multiple values are in a vector — any-all-in","text":"infix operators test whether left-hand side elements occur right-hand side.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/any-all-in.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test whether multiple values are in a vector — any-all-in","text":"","code":"lhs %all_in% rhs  lhs %any_in% rhs"},{"path":"https://ccsarapas.github.io/lighthouse/reference/any-all-in.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test whether multiple values are in a vector — any-all-in","text":"%all_in% returns TRUE elements left operand (lhs) found right operand (rhs). Equivalent (lhs %% rhs). %any_in returns TRUE elements left operand (lhs) found right operand (rhs). Equivalent (lhs %% rhs).","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/any-all-in.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test whether multiple values are in a vector — any-all-in","text":"","code":"maybe_states <- c(\"Idaho\", \"Illinois\", \"North Tuba\", \"Maine\") maybe_states %any_in% state.name  # TRUE #> [1] TRUE maybe_states %all_in% state.name  # FALSE #> [1] FALSE rm(maybe_states)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/asterisks.html","id":null,"dir":"Reference","previous_headings":"","what":"Return asterisks corresponding to p-values — asterisks","title":"Return asterisks corresponding to p-values — asterisks","text":"Return asterisks corresponding p-values","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/asterisks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return asterisks corresponding to p-values — asterisks","text":"","code":"asterisks(   p,   trends = TRUE,   levels = c(0.1, 0.05, 0.01, 0.001),   marks = c(sig = \"*\", trend = \"+\", ns = NA_character_),   include_key = TRUE )"},{"path":"https://ccsarapas.github.io/lighthouse/reference/coerce_na_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Set NA values based on numbers stored as strings. — coerce_na_range","title":"Set NA values based on numbers stored as strings. — coerce_na_range","text":"Changes values coercible numeric range range_min:range_max NA. Useful imported SPSS files.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/coerce_na_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set NA values based on numbers stored as strings. — coerce_na_range","text":"","code":"coerce_na_range(x, ...)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/cohen_w.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Cohen's w — cohen_w","title":"Compute Cohen's w — cohen_w","text":"Cohen's w effect size measure associations nominal variables, generally used conjunction chi-squared tests. cohen_w() computes Cohen's w results chi-squared test.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/cohen_w.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Cohen's w — cohen_w","text":"","code":"cohen_w(chisq)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/cohen_w.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Cohen's w — cohen_w","text":"chisq \"htest\" object returned stats::chisq.test().","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/cohen_w.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Cohen's w — cohen_w","text":"","code":"chisq_out <- chisq.test(ggplot2::diamonds$cut, ggplot2::diamonds$color) cohen_w(chisq_out) #> [1] 0.07584867"},{"path":"https://ccsarapas.github.io/lighthouse/reference/cols_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Get information about dataframe columns — cols_info","title":"Get information about dataframe columns — cols_info","text":"Returns summary column's class, type, missing data. dataframe imported SPSS .sav \"labelled\" package installed, SPSS variable labels also included.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/cols_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get information about dataframe columns — cols_info","text":"","code":"cols_info(x, zap_spss = TRUE)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/count_duplicates.html","id":null,"dir":"Reference","previous_headings":"","what":"Count duplicates — count_duplicates","title":"Count duplicates — count_duplicates","text":"Count duplicates","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/count_duplicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count duplicates — count_duplicates","text":"","code":"count_duplicates(.data, ..., na.rm = FALSE)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/count_multiple.html","id":null,"dir":"Reference","previous_headings":"","what":"Count observations for multiple variables — count_multiple","title":"Count observations for multiple variables — count_multiple","text":"Returns table frequencies column passed ....","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/count_multiple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count observations for multiple variables — count_multiple","text":"","code":"count_multiple(   .data,   ...,   .pct = TRUE,   sort = FALSE,   name = NULL,   na.rm = FALSE,   .drop = TRUE )"},{"path":"https://ccsarapas.github.io/lighthouse/reference/count_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Count NA values by group — count_na","title":"Count NA values by group — count_na","text":"Returns patterns missingness across one variables, number cases pattern.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/count_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count NA values by group — count_na","text":"","code":"count_na(   .data,   ...,   .label_missing = NA_character_,   .label_valid = \"OK\",   .add_percent = FALSE )"},{"path":"https://ccsarapas.github.io/lighthouse/reference/count_pct.html","id":null,"dir":"Reference","previous_headings":"","what":"Count observations with percentage — count_pct","title":"Count observations with percentage — count_pct","text":"Adds column percent total results dplyr::count().","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/count_pct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count observations with percentage — count_pct","text":"","code":"count_pct(.data, ..., na.rm = FALSE, multiply = FALSE)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/count_unique.html","id":null,"dir":"Reference","previous_headings":"","what":"Count number of unique values in a set of dataframe columns — count_unique","title":"Count number of unique values in a set of dataframe columns — count_unique","text":"pipe-friendly wrapper around dplyr::n_distinct().","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/count_unique.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count number of unique values in a set of dataframe columns — count_unique","text":"","code":"count_unique(.data, ..., name = \"n_unique\", na.rm = FALSE)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/count_with_total.html","id":null,"dir":"Reference","previous_headings":"","what":"Count observations with total — count_with_total","title":"Count observations with total — count_with_total","text":"Adds row column totals results dplyr::count(). Can take multiple variables, totals first variable given.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/count_with_total.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count observations with total — count_with_total","text":"","code":"count_with_total(   .data,   ...,   totals_for = NULL,   label = \"Total\",   first_row = FALSE,   .drop = TRUE )"},{"path":"https://ccsarapas.github.io/lighthouse/reference/crosstab.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross-tabulate observations — crosstab","title":"Cross-tabulate observations — crosstab","text":"Builds contingency table similar base::table(). Unlike base::table(), crosstab() pipe-friendly, outputs ordinary tibble / data.frame -- e.g., retain structure exported csv. Currently supports two variables.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/crosstab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross-tabulate observations — crosstab","text":"","code":"crosstab(.data, ..., .drop = TRUE)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/cumsum_desc.html","id":null,"dir":"Reference","previous_headings":"","what":"Descending cumulative sum — cumsum_desc","title":"Descending cumulative sum — cumsum_desc","text":"Returns cumulative sum beginning last element x.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/cumsum_desc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Descending cumulative sum — cumsum_desc","text":"","code":"cumsum_desc(x)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/cumsum_desc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Descending cumulative sum — cumsum_desc","text":"","code":"ggplot2::diamonds %>%   dplyr::count(cut) %>%   dplyr::mutate(     or_worse = cumsum(n),     or_better = cumsum_desc(n)   ) #> # A tibble: 5 × 4 #>   cut           n or_worse or_better #>   <ord>     <int>    <int>     <int> #> 1 Fair       1610     1610     53940 #> 2 Good       4906     6516     52330 #> 3 Very Good 12082    18598     47424 #> 4 Premium   13791    32389     35342 #> 5 Ideal     21551    53940     21551"},{"path":"https://ccsarapas.github.io/lighthouse/reference/d_to_OR.html","id":null,"dir":"Reference","previous_headings":"","what":"Conversion between Cohen's d and odds ratio — d_to_OR","title":"Conversion between Cohen's d and odds ratio — d_to_OR","text":"Functions convert Cohen's d odds ratio vice versa.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/d_to_OR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conversion between Cohen's d and odds ratio — d_to_OR","text":"","code":"d_to_OR(d)  OR_to_d(OR)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/datetimes_to_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert all datetimes in table to dates — datetimes_to_date","title":"Convert all datetimes in table to dates — datetimes_to_date","text":"Returns dataframe datetime columns (.e., class POSIXct POSIXlt) converted Date.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/datetimes_to_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert all datetimes in table to dates — datetimes_to_date","text":"","code":"datetimes_to_date(.data)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/days_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of days between two dates — days_diff","title":"Number of days between two dates — days_diff","text":"Returns number days two dates.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/days_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of days between two dates — days_diff","text":"","code":"days_diff(d1, d2)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/discard_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove missing values — discard_na","title":"Remove missing values — discard_na","text":"Returns vector NAs removed.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/discard_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove missing values — discard_na","text":"","code":"discard_na(x)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/fct_case_when.html","id":null,"dir":"Reference","previous_headings":"","what":"Results of case_when() as factor. — fct_case_when","title":"Results of case_when() as factor. — fct_case_when","text":"Wrapper dplyr::case_when(), result factor levels order passed .... Returns ordered factor .ordered TRUE.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/fct_case_when.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Results of case_when() as factor. — fct_case_when","text":"","code":"fct_case_when(..., .ordered = FALSE)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/fct_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter by and drop factor levels simultaneously — fct_filter","title":"Filter by and drop factor levels simultaneously — fct_filter","text":"Filters dataframe specified levels .fct, drops filtered levels .fct.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/fct_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter by and drop factor levels simultaneously — fct_filter","text":"","code":"fct_filter(.data, .fct, .keep = NULL, .drop = NULL)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/fct_reorder_n.html","id":null,"dir":"Reference","previous_headings":"","what":"Reorder factor levels by sorting along multiple other variables. — fct_reorder_n","title":"Reorder factor levels by sorting along multiple other variables. — fct_reorder_n","text":"Reorders levels .f based variables passed ..., breaking ties using variable order passed.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/fct_reorder_n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reorder factor levels by sorting along multiple other variables. — fct_reorder_n","text":"","code":"fct_reorder_n(.f, ..., .desc = FALSE)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/filter_drop.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter by and drop a column simultaneously — filter_drop","title":"Filter by and drop a column simultaneously — filter_drop","text":"Filters dataframe specified values .col, drops .col.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/filter_drop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter by and drop a column simultaneously — filter_drop","text":"","code":"filter_drop(.data, .col, .keep = NULL, .drop = NULL)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/find_na_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify or remove columns with no data — find_na_cols","title":"Identify or remove columns with no data — find_na_cols","text":"find_na_cols() returns names columns .data values NA. drop_na_cols() returns dataset -NA columns removed.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/find_na_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify or remove columns with no data — find_na_cols","text":"","code":"find_na_cols(.data, cols = tidyselect::everything())  drop_na_cols(.data, cols = tidyselect::everything(), quietly = FALSE)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/find_na_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify or remove columns with no data — find_na_cols","text":".data data frame data frame extension (e.g. tibble). cols <tidy-select> Columns check. quietly FALSE, print columns dropped.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/floor_month.html","id":null,"dir":"Reference","previous_headings":"","what":"Floor methods for date objects — floor_month","title":"Floor methods for date objects — floor_month","text":"floor_month() floor_week() simple wrappers around lubridate::floor_date() round first day month week. floor_days() rounds nearest n-day increment. Floors defined relative earliest date x, unless different start date passed start. Default behavior differs lubridate::floor_date(x, unit = \"{n} days\"), \"resets\" floor first month month. lubridate-like behavior can achieved setting reset_monthly = TRUE.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/floor_month.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Floor methods for date objects — floor_month","text":"","code":"floor_month(x)  floor_week(x, week_start = getOption(\"lubridate.week.start\", 7))  floor_days(x, n = 1L, start = min(x, na.rm = TRUE), reset_monthly = FALSE)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/gain_ss_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute time period scores for GAIN-SS scales — gain_ss_score","title":"Compute time period scores for GAIN-SS scales — gain_ss_score","text":"Pass scale items .... return columns score lifetime, past year, past 90 days, past month positive items","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/gain_ss_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute time period scores for GAIN-SS scales — gain_ss_score","text":"","code":"gain_ss_score(..., .prefix = NULL)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/get_col_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize a dataframe's column types - DEPRECATED — get_col_types","title":"Summarize a dataframe's column types - DEPRECATED — get_col_types","text":"Returns class type column .data. Deprecated favor cols_info(), provides information features stable.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/get_col_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize a dataframe's column types - DEPRECATED — get_col_types","text":"","code":"get_col_types(.data)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/ggview.html","id":null,"dir":"Reference","previous_headings":"","what":"Nicer ggplot rendering — ggview","title":"Nicer ggplot rendering — ggview","text":"Saves ggplot object .svg R temp directory, displays RStudio Viewer pane. Results better image quality Windows machines.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/ggview.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nicer ggplot rendering — ggview","text":"","code":"ggview(   plot = ggplot2::last_plot(),   width = NULL,   height = NULL,   type = c(\"svg\", \"png\") )"},{"path":"https://ccsarapas.github.io/lighthouse/reference/glue_chr.html","id":null,"dir":"Reference","previous_headings":"","what":"Format and interpolate a string as character vector — glue_chr","title":"Format and interpolate a string as character vector — glue_chr","text":"wrapper around glue::glue() returns character vector rather \"glue\" object.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/glue_chr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format and interpolate a string as character vector — glue_chr","text":"","code":"glue_chr(...)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/glue_chr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format and interpolate a string as character vector — glue_chr","text":"... [expressions] Unnamed arguments taken expression string(s) format. Multiple inputs concatenated together formatting. Named arguments taken temporary variables available substitution.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/group_split_named.html","id":null,"dir":"Reference","previous_headings":"","what":"Split dataframe by named groups — group_split_named","title":"Split dataframe by named groups — group_split_named","text":"Divides .data named list dataframes defined grouping structure. Grouping variables can optionally passed .... nested list returned one grouping variable .nested = TRUE.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/group_split_named.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split dataframe by named groups — group_split_named","text":"","code":"group_split_named(   .data,   ...,   .keep = TRUE,   .sep = \".\",   .col_names = FALSE,   .col_sep = \"_\",   .nested = FALSE,   .na.rm = FALSE,   .add_groups = TRUE )"},{"path":"https://ccsarapas.github.io/lighthouse/reference/group_split_named.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split dataframe by named groups — group_split_named","text":"","code":"by_cyl_gear1 <- mtcars %>%   group_split_named(cyl, gear, .col_names = TRUE) by_cyl_gear1$cyl_6.gear_4 #> # A tibble: 4 × 11 #>     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1  21       6  160    110  3.9   2.62  16.5     0     1     4     4 #> 2  21       6  160    110  3.9   2.88  17.0     0     1     4     4 #> 3  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4 #> 4  17.8     6  168.   123  3.92  3.44  18.9     1     0     4     4  by_cyl_gear2 <- mtcars %>%   group_split_named(cyl, gear, .col_names = TRUE, .nested = TRUE) by_cyl_gear2$cyl_6 #> $gear_3 #> # A tibble: 2 × 11 #>     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1  21.4     6   258   110  3.08  3.22  19.4     1     0     3     1 #> 2  18.1     6   225   105  2.76  3.46  20.2     1     0     3     1 #>  #> $gear_4 #> # A tibble: 4 × 11 #>     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1  21       6  160    110  3.9   2.62  16.5     0     1     4     4 #> 2  21       6  160    110  3.9   2.88  17.0     0     1     4     4 #> 3  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4 #> 4  17.8     6  168.   123  3.92  3.44  18.9     1     0     4     4 #>  #> $gear_5 #> # A tibble: 1 × 11 #>     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1  19.7     6   145   175  3.62  2.77  15.5     0     1     5     6 #>  by_cyl_gear2$cyl_6$gear_4 #> # A tibble: 4 × 11 #>     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1  21       6  160    110  3.9   2.62  16.5     0     1     4     4 #> 2  21       6  160    110  3.9   2.88  17.0     0     1     4     4 #> 3  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4 #> 4  17.8     6  168.   123  3.92  3.44  18.9     1     0     4     4"},{"path":"https://ccsarapas.github.io/lighthouse/reference/group_with_total.html","id":null,"dir":"Reference","previous_headings":"","what":"Add ","title":"Add ","text":"Groups dataframe columns specified ... using dplyr::group_by(), adds additional group containing observations. Useful including \"total\" \"overall\" row summaries. one column passed ..., \"total\" group combine groups first column passed, unless different column specified .totals_for. Removing changing grouping structure calling group_with_total() aggregating may yield inaccurate results.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/group_with_total.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add ","text":"","code":"group_with_total(   .data,   ...,   .totals_for = NULL,   .label = \"Total\",   .add = FALSE,   .drop = dplyr::group_by_drop_default(.data),   .first_row = FALSE )"},{"path":"https://ccsarapas.github.io/lighthouse/reference/group_with_total.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add ","text":"","code":"ggplot2::mpg %>%   group_with_total(class) %>%   dplyr::summarize(n = dplyr::n(), cty = mean(cty), hwy = mean(hwy)) #> # A tibble: 8 × 4 #>   class          n   cty   hwy #>   <fct>      <int> <dbl> <dbl> #> 1 2seater        5  15.4  24.8 #> 2 compact       47  20.1  28.3 #> 3 midsize       41  18.8  27.3 #> 4 minivan       11  15.8  22.4 #> 5 pickup        33  13    16.9 #> 6 subcompact    35  20.4  28.1 #> 7 suv           62  13.5  18.1 #> 8 Total        234  16.9  23.4  ggplot2::mpg %>%   group_with_total(year, drv, .label = \"all years\") %>%   dplyr::summarize(n = dplyr::n(), cty = mean(cty), hwy = mean(hwy)) #> `summarise()` has grouped output by 'year'. You can override using the #> `.groups` argument. #> # A tibble: 9 × 5 #> # Groups:   year [3] #>   year      drv       n   cty   hwy #>   <fct>     <chr> <int> <dbl> <dbl> #> 1 1999      4        49  14.2  18.8 #> 2 1999      f        57  20.0  27.9 #> 3 1999      r        11  14    20.6 #> 4 2008      4        54  14.4  19.5 #> 5 2008      f        49  20.0  28.4 #> 6 2008      r        14  14.1  21.3 #> 7 all years 4       103  14.3  19.2 #> 8 all years f       106  20.0  28.2 #> 9 all years r        25  14.1  21    ggplot2::mpg %>%   group_with_total(year, drv, .totals_for = drv) %>%   dplyr::summarize(n = dplyr::n(), cty = mean(cty), hwy = mean(hwy)) #> `summarise()` has grouped output by 'year'. You can override using the #> `.groups` argument. #> # A tibble: 8 × 5 #> # Groups:   year [2] #>    year drv       n   cty   hwy #>   <int> <fct> <int> <dbl> <dbl> #> 1  1999 4        49  14.2  18.8 #> 2  1999 f        57  20.0  27.9 #> 3  1999 r        11  14    20.6 #> 4  1999 Total   117  17.0  23.4 #> 5  2008 4        54  14.4  19.5 #> 6  2008 f        49  20.0  28.4 #> 7  2008 r        14  14.1  21.3 #> 8  2008 Total   117  16.7  23.5"},{"path":"https://ccsarapas.github.io/lighthouse/reference/holidays_chestnut.html","id":null,"dir":"Reference","previous_headings":"","what":"CHS holidays over a 20-year period — holidays_chestnut","title":"CHS holidays over a 20-year period — holidays_chestnut","text":"dataset containing dates Chestnut Health System holidays 2010-12-31 2030-12-31.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/holidays_chestnut.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CHS holidays over a 20-year period — holidays_chestnut","text":"","code":"holidays_chestnut"},{"path":"https://ccsarapas.github.io/lighthouse/reference/holidays_chestnut.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CHS holidays over a 20-year period — holidays_chestnut","text":"tibble 140 rows 2 variables: Date date holiday observed Holiday holiday name","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/holidays_il.html","id":null,"dir":"Reference","previous_headings":"","what":"Illinois state holidays over a 20-year period — holidays_il","title":"Illinois state holidays over a 20-year period — holidays_il","text":"dataset containing dates State Illinois holidays 2010-12-31 2030-12-31.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/holidays_il.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Illinois state holidays over a 20-year period — holidays_il","text":"","code":"holidays_il"},{"path":"https://ccsarapas.github.io/lighthouse/reference/holidays_il.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Illinois state holidays over a 20-year period — holidays_il","text":"tibble 252 rows 2 variables: Date date holiday observed Holiday holiday name","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/holidays_us.html","id":null,"dir":"Reference","previous_headings":"","what":"US federal holidays over a 20-year period — holidays_us","title":"US federal holidays over a 20-year period — holidays_us","text":"dataset containing dates United States federal holidays 2010-12-31 2030-12-31.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/holidays_us.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"US federal holidays over a 20-year period — holidays_us","text":"","code":"holidays_us"},{"path":"https://ccsarapas.github.io/lighthouse/reference/holidays_us.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"US federal holidays over a 20-year period — holidays_us","text":"tibble 212 rows 2 variables: Date date holiday observed Holiday holiday name","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/holidays_us.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"US federal holidays over a 20-year period — holidays_us","text":"https://www.opm.gov/policy-data-oversight/pay-leave/federal-holidays/","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/in_excel.html","id":null,"dir":"Reference","previous_headings":"","what":"Open dataframe in Excel — in_excel","title":"Open dataframe in Excel — in_excel","text":"Saves dataframe .csv R temp directory, opens Excel. .csv randomly-generated name unless otherwise specified name.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/in_excel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open dataframe in Excel — in_excel","text":"","code":"in_excel(df, name, na = \"\")"},{"path":"https://ccsarapas.github.io/lighthouse/reference/is_TRUE.html","id":null,"dir":"Reference","previous_headings":"","what":"Vectorized logical tests — is_TRUE","title":"Vectorized logical tests — is_TRUE","text":"is_TRUE() is_FALSE() vectorized versions base::isTRUE() base::isFALSE(), respectively. is_TRUE() returns TRUE vector element evaluates TRUE, FALSE elements (including NAs non-logical values). Useful handling NAs logical tests.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/is_TRUE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vectorized logical tests — is_TRUE","text":"","code":"is_TRUE(x, strict = TRUE)  is_FALSE(x, strict = TRUE)  is_TRUE_or_NA(x, strict = TRUE)  is_FALSE_or_NA(x, strict = TRUE)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/is_TRUE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vectorized logical tests — is_TRUE","text":"x Vector tested strict TRUE (default), numeric character types always return FALSE. FALSE, numeric character vectors can coerced logical (e.g., 1, \"FALSE\") coerced testing.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/is_coercible_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Test for data encoded as other formats — is_coercible_numeric","title":"Test for data encoded as other formats — is_coercible_numeric","text":"Tests whether element vector can coerced another type. See examples.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/is_coercible_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test for data encoded as other formats — is_coercible_numeric","text":"","code":"is_coercible_numeric(x, all = FALSE, na = c(\"NA\", \"TRUE\"))  is_coercible_integer(x, all = FALSE, na = c(\"NA\", \"TRUE\"))  is_coercible_logical(   x,   all = FALSE,   na = c(\"NA\", \"TRUE\"),   numeric = c(\"binary\", \"any\") )"},{"path":"https://ccsarapas.github.io/lighthouse/reference/is_coercible_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test for data encoded as other formats — is_coercible_numeric","text":"x Vector tested TRUE, returns single logical indicating whether every element x coercible. FALSE (default), returns logical vector length x testing element x. na NA values test NA (default) TRUE? numeric is_coercible_logical, numeric value test TRUE, 0 1 (default)?","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/is_coercible_numeric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test for data encoded as other formats — is_coercible_numeric","text":"","code":"x <- c(\"1\", \"-1.23\", \"$1,234\", NA) is_coercible_numeric(x) #> [1]  TRUE  TRUE FALSE    NA  is_coercible_numeric(x, na = \"TRUE\") #> [1]  TRUE  TRUE FALSE  TRUE  is_coercible_numeric(x, all = TRUE) #> [1] FALSE  is_coercible_integer(x) #> [1]  TRUE FALSE FALSE    NA  y <- c(\"TRUE\", \"T\", \"F\", \"YES\", \"NA\", NA) is_coercible_logical(y) #> [1]  TRUE  TRUE  TRUE FALSE FALSE    NA  z <- c(0, 1, 2, .1, -1) is_coercible_logical(z) #> [1]  TRUE  TRUE FALSE FALSE FALSE  is_coercible_logical(z, numeric = \"any\") #> [1] TRUE TRUE TRUE TRUE TRUE"},{"path":"https://ccsarapas.github.io/lighthouse/reference/is_duplicate.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify duplicates within a vector or set of vectors. — is_duplicate","title":"Identify duplicates within a vector or set of vectors. — is_duplicate","text":"Identify duplicates within vector set vectors.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/is_duplicate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify duplicates within a vector or set of vectors. — is_duplicate","text":"","code":"is_duplicate(..., nmax = 1, incomparables = FALSE)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/is_duplicate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify duplicates within a vector or set of vectors. — is_duplicate","text":"","code":"x <- c(1, 2, 2, 3, 3, 3) y <- c(1, 1, 2, 1, 2, 2) is_duplicate(x) #> [1] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE is_duplicate(x, y) #> [1] FALSE FALSE FALSE FALSE  TRUE  TRUE"},{"path":"https://ccsarapas.github.io/lighthouse/reference/is_spss.html","id":null,"dir":"Reference","previous_headings":"","what":"Test whether a dataframe contains SPSS variable or value labels. — is_spss","title":"Test whether a dataframe contains SPSS variable or value labels. — is_spss","text":"Test whether dataframe contains SPSS variable value labels.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/is_spss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test whether a dataframe contains SPSS variable or value labels. — is_spss","text":"","code":"is_spss(.data)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/is_valid.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify non-missing values — is_valid","title":"Identify non-missing values — is_valid","text":"wrapper around !.na(x).","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/is_valid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify non-missing values — is_valid","text":"","code":"is_valid(x)  is.valid(x)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/median_dbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Median value as double — median_dbl","title":"Median value as double — median_dbl","text":"Returns median x double vector. Alternative stats::median() consistent return value needed.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/median_dbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Median value as double — median_dbl","text":"","code":"median_dbl(x, na.rm = FALSE, ...)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/median_dbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Median value as double — median_dbl","text":"","code":"if (FALSE) { # stats::median raises error because of inconsistent return types dplyr::if_else(c(TRUE, FALSE), median(1:4), median(1:5)) # Error in `dplyr::if_else()`: # ! `false` must be a double vector, not an integer vector.  # dplyr::if_else(c(TRUE, FALSE), median_dbl(1:4), median_dbl(1:5)) # 2.5 3.0 }"},{"path":"https://ccsarapas.github.io/lighthouse/reference/n_valid.html","id":null,"dir":"Reference","previous_headings":"","what":"Count non-missing cases — n_valid","title":"Count non-missing cases — n_valid","text":"n_valid() returns number vector elements NA. returns percentage non-NA values = \"pct\", tibble containing number percentage = \"n_pct\". pct_valid() wrapper around n_valid(= \"pct\"). n_pct_valid() wrapper around n_pct_valid(= \"n_pct\").","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/n_valid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count non-missing cases — n_valid","text":"","code":"n_valid(x, out = c(\"n\", \"pct\", \"n_pct\"), ...)  pct_valid(x, ...)  n_pct_valid(x, ...)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/na_like.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate NA values of appropriate type — na_like","title":"Generate NA values of appropriate type — na_like","text":"Returns compatible NA based x. usually type x (e.g., NA_real_ x double vector). x factor, return NA_character_ factor_as_character = TRUE (default) NA_integer_ otherwise.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/na_like.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate NA values of appropriate type — na_like","text":"","code":"na_like(x, factor_as_character = TRUE, match_length = FALSE)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/na_to_null.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace NA with NULL and vice versa — na_to_null","title":"Replace NA with NULL and vice versa — na_to_null","text":"na_to_null() Replaces NAs vector list NULL. Can useful lists function arguments (e.g., using purrr::pmap()). null_to_na() Replaces NULLs list NAs. Returns atomic vector unlist = TRUE list otherwise.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/na_to_null.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace NA with NULL and vice versa — na_to_null","text":"","code":"na_to_null(x)  null_to_na(x, unlist = FALSE)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/next_bizday.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the next business day — next_bizday","title":"Find the next business day — next_bizday","text":"Returns next date weekend holiday.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/next_bizday.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the next business day — next_bizday","text":"","code":"next_bizday(   x,   include_today = TRUE,   holidays = c(\"Chestnut\", \"Illinois\", \"federal\") )"},{"path":"https://ccsarapas.github.io/lighthouse/reference/next_bizday.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the next business day — next_bizday","text":"x Date coercible Date include_today x business day, return x TRUE next business day x otherwise. holidays Holiday calendar use. Available options \"Chestnut\" Chestnut Health System holidays, \"Illinois\" State Illinois holidays, \"federal\" United States federal holidays.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/not-in.html","id":null,"dir":"Reference","previous_headings":"","what":"Match values not in vector — not-in","title":"Match values not in vector — not-in","text":"Infix operator returning TRUE elements left operand (lhs) found right operand (rhs). Equivalent !(lhs %% rhs).","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/not-in.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match values not in vector — not-in","text":"","code":"lhs %!in% rhs"},{"path":"https://ccsarapas.github.io/lighthouse/reference/not-in.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Match values not in vector — not-in","text":"","code":"\"April\" %!in% month.name #> [1] FALSE \"Junvember\" %!in% month.name #> [1] TRUE  some_letters <- sample(letters, 10) letters[letters %in% some_letters] #>  [1] \"e\" \"i\" \"l\" \"o\" \"r\" \"s\" \"t\" \"w\" \"x\" \"z\" letters[letters %!in% some_letters] #>  [1] \"a\" \"b\" \"c\" \"d\" \"f\" \"g\" \"h\" \"j\" \"k\" \"m\" \"n\" \"p\" \"q\" \"u\" \"v\" \"y\""},{"path":"https://ccsarapas.github.io/lighthouse/reference/p_to_OR.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute odds ratio from probabilities — p_to_OR","title":"Compute odds ratio from probabilities — p_to_OR","text":"Given probabilities p1 p2, returns odds ratio (odds p2 relative odds p1).","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/p_to_OR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute odds ratio from probabilities — p_to_OR","text":"","code":"p_to_OR(p1, p2)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/pivot_wider_alt.html","id":null,"dir":"Reference","previous_headings":"","what":"Alternative column ordering and naming for pivot_wider() — pivot_wider_alt","title":"Alternative column ordering and naming for pivot_wider() — pivot_wider_alt","text":"wrapper around tidyr::pivot_wider() additional options sorting naming output columns, arguments sort_by_col, names_value_first, names_value_sep options relevant one input column passed values_from.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/pivot_wider_alt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alternative column ordering and naming for pivot_wider() — pivot_wider_alt","text":"","code":"pivot_wider_alt(   data,   id_cols = NULL,   names_from = name,   sort_by_col = TRUE,   names_value_first = TRUE,   names_value_sep = \".\",   names_sep = \"_\",   names_prefix = \"\",   names_glue = NULL,   names_repair = \"check_unique\",   values_from = value,   values_fill = NULL,   values_fn = NULL )"},{"path":"https://ccsarapas.github.io/lighthouse/reference/pivot_wider_alt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Alternative column ordering and naming for pivot_wider() — pivot_wider_alt","text":"data data frame pivot. id_cols <tidy-select> set columns uniquely identifies observation. Defaults columns data except columns specified names_from values_from. Typically used redundant variables, .e. variables whose values perfectly correlated existing variables. names_from <tidy-select> pair arguments describing column (columns) get name output column (names_from), column (columns) get cell values (values_from). values_from contains multiple values, value added front output column. sort_by_col TRUE (default), output columns sorted names_from, values_from. (Differs tidyr::pivot_wider(), sorts values_from first, names_from.) names_value_first FALSE, output columns named using {column}_{.value} scheme. (Differs tidyr::pivot_wider(), uses {.value}_{column} scheme.) names_value_sep, names_sep names_from values_from contain multiple variables, used join values together single string use column name. names_value_sep separate {.value} {column} components, names_sep separate {column} components one another names_from contains multiple variables. See Details Examples. names_prefix, names_glue, names_repair, values_from, values_fill, values_fn See documentation tidyr::pivot_wider().","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/pivot_wider_alt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Alternative column ordering and naming for pivot_wider() — pivot_wider_alt","text":"names_value_sep argument allows output column names use different separator {.value} {column} multiple {columns}s. Example:","code":"pivot_wider_alt(   fakedata,   names_from = c(size, color), # size = \"sm\", \"med\", \"lg\"; color = \"red\", \"blue\"   values_from = c(n, weight),   names_sep = \"_\",   names_value_sep = \": \" )  # output column names: # `n: sm_red`, `weight: sm_red`, `n: sm_blue`, `weight: sm_blue`, `n: med_red`..."},{"path":"https://ccsarapas.github.io/lighthouse/reference/pivot_wider_alt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Alternative column ordering and naming for pivot_wider() — pivot_wider_alt","text":"","code":"data_ex <- ggplot2::diamonds %>%   dplyr::group_by(cut, color) %>%   dplyr::summarize(Min = min(price), Median = median(price), Max = max(price)) #> `summarise()` has grouped output by 'cut'. You can override using the `.groups` #> argument.  # default pivot_wider() behavior data_ex %>%   tidyr::pivot_wider(     id_cols = color,     names_from = cut,     values_from = Min:Max   ) #> # A tibble: 7 × 16 #>   color Min_Fair Min_Good `Min_Very Good` Min_Premium Min_Ideal Median_Fair #>   <ord>    <int>    <int>           <int>       <int>     <int>       <dbl> #> 1 D          536      361             357         367       367        3730 #> 2 E          337      327             352         326       326        2956 #> 3 F          496      357             357         342       408        3035 #> 4 G          369      394             354         382       361        3057 #> 5 H          659      368             337         368       357        3816 #> 6 I          735      351             336         334       348        3246 #> 7 J          416      335             336         363       340        3302 #> # … with 9 more variables: Median_Good <dbl>, `Median_Very Good` <dbl>, #> #   Median_Premium <dbl>, Median_Ideal <dbl>, Max_Fair <int>, Max_Good <int>, #> #   `Max_Very Good` <int>, Max_Premium <int>, Max_Ideal <int>  # pivot_wider_alt() behavior data_ex %>%   pivot_wider_alt(     id_cols = color,     names_from = cut,     values_from = Min:Max ) #> # A tibble: 7 × 16 #>   color Min.Fair Median.Fair Max.Fair Min.Good Median.Good Max.Good #>   <ord>    <int>       <dbl>    <int>    <int>       <dbl>    <int> #> 1 D          536        3730    16386      361       2728.    18468 #> 2 E          337        2956    15584      327       2420     18236 #> 3 F          496        3035    17995      357       2647     18686 #> 4 G          369        3057    18574      394       3340     18788 #> 5 H          659        3816    18565      368       3468.    18640 #> 6 I          735        3246    18242      351       3640.    18707 #> 7 J          416        3302    18531      335       3733     18325 #> # … with 9 more variables: `Min.Very Good` <int>, `Median.Very Good` <dbl>, #> #   `Max.Very Good` <int>, Min.Premium <int>, Median.Premium <dbl>, #> #   Max.Premium <int>, Min.Ideal <int>, Median.Ideal <dbl>, Max.Ideal <int>  # with `names_value_first` = FALSE data_ex %>%   pivot_wider_alt(     id_cols = color,     names_from = cut,     values_from = Min:Max,     names_value_first = FALSE   ) #> # A tibble: 7 × 16 #>   color Fair.Min Fair.Median Fair.Max Good.Min Good.Median Good.Max #>   <ord>    <int>       <dbl>    <int>    <int>       <dbl>    <int> #> 1 D          536        3730    16386      361       2728.    18468 #> 2 E          337        2956    15584      327       2420     18236 #> 3 F          496        3035    17995      357       2647     18686 #> 4 G          369        3057    18574      394       3340     18788 #> 5 H          659        3816    18565      368       3468.    18640 #> 6 I          735        3246    18242      351       3640.    18707 #> 7 J          416        3302    18531      335       3733     18325 #> # … with 9 more variables: `Very Good.Min` <int>, `Very Good.Median` <dbl>, #> #   `Very Good.Max` <int>, Premium.Min <int>, Premium.Median <dbl>, #> #   Premium.Max <int>, Ideal.Min <int>, Ideal.Median <dbl>, Ideal.Max <int>  # multiple `names_from` vars, with different value vs. name separators ggplot2::mpg %>%   dplyr::filter(class %in% c(\"compact\", \"subcompact\", \"midsize\")) %>%   dplyr::group_by(     manufacturer,     trans = stringr::str_extract(trans, \".*(?=\\\\()\"), year   ) %>%   dplyr::summarize(across(c(cty, hwy), mean)) %>%   pivot_wider_alt(     names_from = trans:year,     values_from = cty:hwy,     names_sep = \"_\",     names_value_sep = \": \"   ) #> `summarise()` has grouped output by 'manufacturer', 'trans'. You can override #> using the `.groups` argument. #> # A tibble: 10 × 9 #> # Groups:   manufacturer [10] #>    manufacturer `cty: auto_1999` `hwy: auto_1999` `cty: auto_2008` #>    <chr>                   <dbl>            <dbl>            <dbl> #>  1 audi                     16               25.8             18   #>  2 chevrolet                18.5             26.5             19   #>  3 ford                     16.5             23               15.5 #>  4 honda                    24               32               24.5 #>  5 hyundai                  18.3             26               19.2 #>  6 nissan                   18.5             26.5             20.3 #>  7 pontiac                  17               26.3             17   #>  8 subaru                   20               26               20   #>  9 toyota                   21               28.2             21.2 #> 10 volkswagen               19.4             28.1             20.2 #> # … with 5 more variables: `hwy: auto_2008` <dbl>, `cty: manual_1999` <dbl>, #> #   `hwy: manual_1999` <dbl>, `cty: manual_2008` <dbl>, #> #   `hwy: manual_2008` <dbl>"},{"path":"https://ccsarapas.github.io/lighthouse/reference/pminmax_across.html","id":null,"dir":"Reference","previous_headings":"","what":"tidyselect-friendly parallel minima and maxima — pminmax_across","title":"tidyselect-friendly parallel minima and maxima — pminmax_across","text":"Wrappers around base::pmin() base::pmax() accept <tidy-select> expressions.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/pminmax_across.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tidyselect-friendly parallel minima and maxima — pminmax_across","text":"","code":"pminmax_across(cols, na.rm, .fn)  pmax_across(cols, na.rm = FALSE)  pmin_across(cols, na.rm = FALSE)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/pminmax_across.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"tidyselect-friendly parallel minima and maxima — pminmax_across","text":"","code":"# using `base::pmax()` mtcars %>%   dplyr::mutate(     max_val = pmax(mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb)   ) #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb max_val #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4   160.0 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4   160.0 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1   108.0 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1   258.0 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2   360.0 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1   225.0 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4   360.0 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2   146.7 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2   140.8 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4   167.6 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4   167.6 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3   275.8 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3   275.8 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3   275.8 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4   472.0 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4   460.0 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4   440.0 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1    78.7 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2    75.7 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1    71.1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1   120.1 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2   318.0 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2   304.0 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4   350.0 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2   400.0 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1    79.0 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2   120.3 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2   113.0 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4   351.0 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6   175.0 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8   335.0 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2   121.0  # using `pmax_across()` mtcars %>%   dplyr::mutate(max_val = pmax_across(mpg:carb)) #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb max_val #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4   160.0 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4   160.0 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1   108.0 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1   258.0 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2   360.0 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1   225.0 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4   360.0 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2   146.7 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2   140.8 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4   167.6 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4   167.6 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3   275.8 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3   275.8 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3   275.8 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4   472.0 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4   460.0 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4   440.0 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1    78.7 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2    75.7 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1    71.1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1   120.1 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2   318.0 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2   304.0 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4   350.0 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2   400.0 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1    79.0 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2   120.3 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2   113.0 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4   351.0 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6   175.0 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8   335.0 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2   121.0"},{"path":"https://ccsarapas.github.io/lighthouse/reference/print_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Print all tibble rows — print_all","title":"Print all tibble rows — print_all","text":"Actually limits printing RStudioPreference \"console_max_lines\" (1000 lines running RStudio) unless otherwise specified max. Works tibbles, base::data.frames.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/print_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print all tibble rows — print_all","text":"","code":"print_all(x, ..., max = NULL)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/print_n.html","id":null,"dir":"Reference","previous_headings":"","what":"Print specified number of tibble rows — print_n","title":"Print specified number of tibble rows — print_n","text":"Print specified number tibble rows","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/print_n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print specified number of tibble rows — print_n","text":"","code":"print_n(x, n, ...)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/rbool.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random logicals - DEPRECATED — rbool","title":"Generate random logicals - DEPRECATED — rbool","text":"Returns vector random logicals length n, drawn binomial distribution trial probability prob (default = .5). Deprecated Casey realized purrr::rbernoulli() exists exactly .","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/rbool.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate random logicals - DEPRECATED — rbool","text":"","code":"rbool(n, prob = 0.5)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. magrittr %>%","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/reorder_dendro_by_label.html","id":null,"dir":"Reference","previous_headings":"","what":"Reorder a dendrogram — reorder_dendro_by_label","title":"Reorder a dendrogram — reorder_dendro_by_label","text":"Reorders dendrogram leaves based vector labels passed .order.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/reorder_dendro_by_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reorder a dendrogram — reorder_dendro_by_label","text":"","code":"reorder_dendro_by_label(.dendro, .order, agglo.FUN = max)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/rev_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse the order of rows in a table. — rev_rows","title":"Reverse the order of rows in a table. — rev_rows","text":"Reverse order rows table.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/rev_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse the order of rows in a table. — rev_rows","text":"","code":"rev_rows(.data)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/reverse_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse key a numeric vector — reverse_key","title":"Reverse key a numeric vector — reverse_key","text":"Reverses numeric vector x subtracting min adding max. Observed minimum maximum x used unless otherwise specified.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/reverse_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse key a numeric vector — reverse_key","text":"","code":"reverse_key(x, na.rm = FALSE, max = NULL, min = NULL)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/reverse_key.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverse key a numeric vector — reverse_key","text":"","code":"reverse_key(1:5) #> [1] 5 4 3 2 1 reverse_key(3:5) #> [1] 5 4 3 reverse_key(3:5, min = 1, max = 5) #> [1] 3 2 1"},{"path":"https://ccsarapas.github.io/lighthouse/reference/row_sums_spss.html","id":null,"dir":"Reference","previous_headings":"","what":"Replicate SPSS SUM() function — row_sums_spss","title":"Replicate SPSS SUM() function — row_sums_spss","text":"Sums across columns la SPSS: NAs counted 0s, variables NA, result NA.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/row_sums_spss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replicate SPSS SUM() function — row_sums_spss","text":"","code":"row_sums_spss(...)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/safe_minmax.html","id":null,"dir":"Reference","previous_headings":"","what":"Maxima and minima with alternative missing value handling — safe_minmax","title":"Maxima and minima with alternative missing value handling — safe_minmax","text":"Returns maximum minimum input values, similar base::min() / max(). Unlike base functions, safe_min() safe_max() return NA values NA na.rm = TRUE. (base::min max() return -Inf Inf situation). Also unlike base functions, na.rm TRUE default (since typical use case).","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/safe_minmax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maxima and minima with alternative missing value handling — safe_minmax","text":"","code":"safe_minmax(..., na.rm, .fn)  safe_max(..., na.rm = TRUE)  safe_min(..., na.rm = TRUE)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/scale_mad.html","id":null,"dir":"Reference","previous_headings":"","what":"Scale based on median absolute deviation — scale_mad","title":"Scale based on median absolute deviation — scale_mad","text":"Scales vector values based median absolute deviation. Values may centered around median (default), mean, centered. Compare base::scale(), uses standard deviation centers around mean default.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/scale_mad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scale based on median absolute deviation — scale_mad","text":"","code":"scale_mad(x, center = c(\"median\", \"mean\", \"none\"), mad_constant = 1.4826)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/scale_vec.html","id":null,"dir":"Reference","previous_headings":"","what":"Scaling and centering of vectors — scale_vec","title":"Scaling and centering of vectors — scale_vec","text":"wrapper around base::scale() returns vector instead matrix.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/scale_vec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scaling and centering of vectors — scale_vec","text":"","code":"scale_vec(x, center = TRUE, scale = TRUE)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/scale_vec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scaling and centering of vectors — scale_vec","text":"","code":"# using base::scale() scale(0:4) #>            [,1] #> [1,] -1.2649111 #> [2,] -0.6324555 #> [3,]  0.0000000 #> [4,]  0.6324555 #> [5,]  1.2649111 #> attr(,\"scaled:center\") #> [1] 2 #> attr(,\"scaled:scale\") #> [1] 1.581139  # using scale_vec() scale_vec(0:4) #> [1] -1.2649111 -0.6324555  0.0000000  0.6324555  1.2649111"},{"path":"https://ccsarapas.github.io/lighthouse/reference/se.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the standard error — se","title":"Compute the standard error — se","text":"Computes standard error values x.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/se.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the standard error — se","text":"","code":"se(x, na.rm = FALSE)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/se.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the standard error — se","text":"x numeric vector R object factor coercible numeric .double(x). na.rm logical. missing values removed?","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/set_ggplot_opts.html","id":null,"dir":"Reference","previous_headings":"","what":"Nicer default theme and palettes for ggplot2 — set_ggplot_opts","title":"Nicer default theme and palettes for ggplot2 — set_ggplot_opts","text":"Changes default theme color scales ggplot2.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/set_ggplot_opts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nicer default theme and palettes for ggplot2 — set_ggplot_opts","text":"","code":"set_ggplot_opts(   base_theme = hrbrthemes::theme_ipsum_rc,   brewer_pal_discrete = \"Set1\",   ... )"},{"path":"https://ccsarapas.github.io/lighthouse/reference/set_ggplot_opts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Nicer default theme and palettes for ggplot2 — set_ggplot_opts","text":"Theme based hrbrthemes::theme_ipsum_rc(), unless otherwise specified base_theme argument. theme modified follows: Axis titles centered Legend title omitted Minor gridlines omitted Facet labels placed outside axes Various tweaks text size margins Default color fill palettes set based scale type: discrete scales, RColorBrewer palette \"Set1,\" unless otherwise specified brewer_pal_discrete argument continuous binned scales, RColorBrewer palette \"Blues\" ordinal scales, viridisLite palette \"viridis\" Default font family geom_text() geom_label() set match base_theme.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/str_collapse.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse a character vector into a single string — str_collapse","title":"Collapse a character vector into a single string — str_collapse","text":"Concatenates elements character vector. Essentially column-wise variant dplyr::str_c(). Can accept multiple character vectors, returned separate character strings join = NULL (default), concatenated separator supplied join.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/str_collapse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse a character vector into a single string — str_collapse","text":"","code":"str_collapse(..., sep = \"\", join = NULL)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/str_detect_any.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect the presence of any pattern in a string — str_detect_any","title":"Detect the presence of any pattern in a string — str_detect_any","text":"Returns TRUE element patterns present string. Matches whole words whole_word = TRUE (FALSE default). Case sensitive unless ignore_case = TRUE (FALSE default).","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/str_detect_any.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect the presence of any pattern in a string — str_detect_any","text":"","code":"str_detect_any(   string,   patterns,   whole_word = FALSE,   ignore_case = FALSE,   negate = FALSE )"},{"path":"https://ccsarapas.github.io/lighthouse/reference/str_prefix.html","id":null,"dir":"Reference","previous_headings":"","what":"Find common prefixes or suffixes — str_prefix","title":"Find common prefixes or suffixes — str_prefix","text":"Returns substring beginnings endings common elements vector.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/str_prefix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find common prefixes or suffixes — str_prefix","text":"","code":"str_prefix(string, na.rm = FALSE)  str_suffix(string, na.rm = FALSE)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/str_prefix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find common prefixes or suffixes — str_prefix","text":"","code":"test_words <- c(\"antidote\", \"antimony\", \"antimatter\", \"antisense\") str_prefix(test_words) #> [1] \"anti\"  wdays <- c(   \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\" ) str_suffix(wdays) #> [1] \"day\""},{"path":"https://ccsarapas.github.io/lighthouse/reference/str_starts_any.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect the presence of any pattern at the beginning of a string — str_starts_any","title":"Detect the presence of any pattern at the beginning of a string — str_starts_any","text":"Returns TRUE element patterns present string.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/str_starts_any.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect the presence of any pattern at the beginning of a string — str_starts_any","text":"","code":"str_starts_any(string, patterns, ignore_case = FALSE, negate = FALSE)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/summary_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom summary table — summary_table","title":"Custom summary table — summary_table","text":"Generates summary table, row variable passed .vars column function passed ....","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/summary_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom summary table — summary_table","text":"","code":"summary_table(   .data,   ...,   .vars = where(is.numeric),   na.rm = FALSE,   .rows_group_by = NULL,   .cols_group_by = NULL,   .cols_group_opts = list(),   .var_col_name = \"Variable\" )"},{"path":"https://ccsarapas.github.io/lighthouse/reference/summary_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Custom summary table — summary_table","text":".data data frame data frame extension (e.g. tibble). ... Functions apply variable specified .vars, function names (e.g., mean) purrr-style lambdas (e.g., ~ mean(.x, na.rm = TRUE)). function passed ... yield one column output table (one column per group .cols_group_by specified). Output column names can optionally specified. E.g., m = mean, sd, sem = ~ sd(.x) / sqrt(n()) yields output columns named m, sd, sem. .vars <tidy-select> Columns .data summarize. column passed .vars yield one row output table (one row per group .rows_group_by specified). na.rm logical value passed functions ... take na.rm argument. .rows_group_by <tidy-select> Grouping variable(s) output rows. .cols_group_by <tidy-select> Grouping variable(s) output columns. .cols_group_opts list arguments passed lighthouse::pivot_wider_alt() .cols_group_by specified. .var_col_name name output column containing variable names passed .vars.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/summary_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Custom summary table — summary_table","text":"","code":"# example data mtcars2 <- mtcars %>%   dplyr::mutate(     Transmission = dplyr::recode(am, `0` = \"auto\", `1` = \"manual\")   )  # simple summary table. note specification of column and row names # for \"n\", \"m\", and \"weight\". mtcars2 %>%   summary_table(     n = ~ sum(!is.na(.x)), m = mean, sd,     .vars = c(mpg, hp, weight = wt)   ) #> # A tibble: 3 × 4 #>   Variable     n      m     sd #>   <chr>    <int>  <dbl>  <dbl> #> 1 mpg         32  20.1   6.03  #> 2 hp          32 147.   68.6   #> 3 weight      32   3.22  0.978  # with column and row groupings mtcars2 %>%   summary_table(     n = ~ sum(!is.na(.x)), m = mean, sd,     .vars = c(mpg, hp, weight = wt),     .cols_group_by = cyl,     .rows_group_by = Transmission   ) #> # A tibble: 6 × 11 #>   Transmission Variable   n.4   m.4   sd.4   n.6    m.6   sd.6   n.8    m.8 #>   <chr>        <chr>    <int> <dbl>  <dbl> <int>  <dbl>  <dbl> <int>  <dbl> #> 1 auto         mpg          3 22.9   1.45      4  19.1   1.63     12  15.0  #> 2 auto         hp           3 84.7  19.7       4 115.    9.18     12 194.   #> 3 auto         weight       3  2.94  0.408     4   3.39  0.116    12   4.10 #> 4 manual       mpg          8 28.1   4.48      3  20.6   0.751     2  15.4  #> 5 manual       hp           8 81.9  22.7       3 132.   37.5       2 300.   #> 6 manual       weight       8  2.04  0.409     3   2.76  0.128     2   3.37 #> # … with 1 more variable: sd.8 <dbl>  # customize output column names with `.cols_group_opts` mtcars2 %>%   summary_table(     n = ~ sum(!is.na(.x)), m = mean, sd,     .vars = c(mpg, hp, weight = wt),     .cols_group_by = cyl,     .rows_group_by = Transmission,     .cols_group_opts = list(       names_value_first = FALSE,       names_prefix = \"cyl\",       names_value_sep = \": \"     )   ) #> # A tibble: 6 × 11 #>   Transmission Variable `cyl4: n` `cyl4: m` `cyl4: sd` `cyl6: n` `cyl6: m` #>   <chr>        <chr>        <int>     <dbl>      <dbl>     <int>     <dbl> #> 1 auto         mpg              3     22.9       1.45          4     19.1  #> 2 auto         hp               3     84.7      19.7           4    115.   #> 3 auto         weight           3      2.94      0.408         4      3.39 #> 4 manual       mpg              8     28.1       4.48          3     20.6  #> 5 manual       hp               8     81.9      22.7           3    132.   #> 6 manual       weight           8      2.04      0.409         3      2.76 #> # … with 4 more variables: `cyl6: sd` <dbl>, `cyl8: n` <int>, `cyl8: m` <dbl>, #> #   `cyl8: sd` <dbl>  # you can alternatively pass a glue specification to `.cols_group_opts` mtcars2 %>%   summary_table(     n = ~ sum(!is.na(.x)), m = mean, sd,     .vars = c(mpg, hp, weight = wt),     .cols_group_by = cyl,     .rows_group_by = Transmission,     .cols_group_opts = list(names_glue = \"{.value}: {cyl}-cyl\")   ) #> # A tibble: 6 × 11 #>   Transmission Variable `n: 4-cyl` `m: 4-cyl` `sd: 4-cyl` `n: 6-cyl` `m: 6-cyl` #>   <chr>        <chr>         <int>      <dbl>       <dbl>      <int>      <dbl> #> 1 auto         mpg               3      22.9        1.45           4      19.1  #> 2 auto         hp                3      84.7       19.7            4     115.   #> 3 auto         weight            3       2.94       0.408          4       3.39 #> 4 manual       mpg               8      28.1        4.48           3      20.6  #> 5 manual       hp                8      81.9       22.7            3     132.   #> 6 manual       weight            8       2.04       0.409          3       2.76 #> # … with 4 more variables: `sd: 6-cyl` <dbl>, `n: 8-cyl` <int>, #> #   `m: 8-cyl` <dbl>, `sd: 8-cyl` <dbl>"},{"path":"https://ccsarapas.github.io/lighthouse/reference/swap_if.html","id":null,"dir":"Reference","previous_headings":"","what":"Swap column values based on condition — swap_if","title":"Swap column values based on condition — swap_if","text":"Swaps values two columns condition met. Based Hadley's code : https://github.com/tidyverse/dplyr/issues/2149#issuecomment-258916706","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/swap_if.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Swap column values based on condition — swap_if","text":"","code":"swap_if(.data, cond, x, y)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/t_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Transpose a tibble — t_tibble","title":"Transpose a tibble — t_tibble","text":"Given tibble data.frame x, returns transpose x. Similar base::t(), accepts returns tibbles, includes options row column name handling.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/t_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transpose a tibble — t_tibble","text":"","code":"t_tibble(x, names_to = \"Variable\", names_from = NULL)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/t_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transpose a tibble — t_tibble","text":"x dataframe tibble. names_to Name column transposed tibble containing column names x names_from Column x used column names transposed tibble. specified x rownames, used; otherwise columns named ...1, ...2, etc.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/try_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Suppress NA warning when coercing to numeric — try_numeric","title":"Suppress NA warning when coercing to numeric — try_numeric","text":"Coerces x numeric. x coerced, returns NA suppresses coercion warning.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/try_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Suppress NA warning when coercing to numeric — try_numeric","text":"","code":"try_numeric(x)  try.numeric(x)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/unpack-assign.html","id":null,"dir":"Reference","previous_headings":"","what":"Unpack and assign — unpack-assign","title":"Unpack and assign — unpack-assign","text":"Assigns vector values equal-length vector names.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/unpack-assign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unpack and assign — unpack-assign","text":"","code":"lhs %<-% rhs  lhs %->% rhs"},{"path":"https://ccsarapas.github.io/lighthouse/reference/unpack-assign.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Unpack and assign — unpack-assign","text":"%<-% operator left--right variant (%->%) allow parallel assignment, similar (e.g.) Python: See zeallot package similar operator advanced functionality.","code":"# python var1, var2, var3 = [2, 4, 6]  # R c(var1, var2, var3) %<-% c(2, 4, 6)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/unpack-assign.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unpack and assign — unpack-assign","text":"","code":"c(cyl4, cyl6, cyl8) %<-% split(mtcars, mtcars$cyl) cyl4 #>                 mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Datsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Merc 240D      24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230       22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Fiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona  21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Fiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa   30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Volvo 142E     21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2  split(mtcars, mtcars$gear) %->% c(G3, G4, G5) G5 #>                 mpg cyl  disp  hp drat    wt qsec vs am gear carb #> Porsche 914-2  26.0   4 120.3  91 4.43 2.140 16.7  0  1    5    2 #> Lotus Europa   30.4   4  95.1 113 3.77 1.513 16.9  1  1    5    2 #> Ford Pantera L 15.8   8 351.0 264 4.22 3.170 14.5  0  1    5    4 #> Ferrari Dino   19.7   6 145.0 175 3.62 2.770 15.5  0  1    5    6 #> Maserati Bora  15.0   8 301.0 335 3.54 3.570 14.6  0  1    5    8  c(model_hp, model_size, model_trans) %<-% purrr::map(   c(\"hp\", \"disp + wt\", \"gear * am\"),   ~ lm(paste(\"mpg ~\", .x), data = mtcars) ) summary(model_size) #>  #> Call: #> lm(formula = paste(\"mpg ~\", .x), data = mtcars) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -3.4087 -2.3243 -0.7683  1.7721  6.3484  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) 34.96055    2.16454  16.151 4.91e-16 *** #> disp        -0.01773    0.00919  -1.929  0.06362 .   #> wt          -3.35082    1.16413  -2.878  0.00743 **  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 2.917 on 29 degrees of freedom #> Multiple R-squared:  0.7809,\tAdjusted R-squared:  0.7658  #> F-statistic: 51.69 on 2 and 29 DF,  p-value: 2.744e-10 #>  summary(model_trans) #>  #> Call: #> lm(formula = paste(\"mpg ~\", .x), data = mtcars) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -6.3800 -3.3062 -0.7567  3.1575  9.0200  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)    #> (Intercept)    1.277      8.217   0.155  0.87764    #> gear           4.943      2.539   1.947  0.06163 .  #> am            44.578     14.010   3.182  0.00356 ** #> gear:am       -9.838      3.614  -2.722  0.01103 *  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 4.512 on 28 degrees of freedom #> Multiple R-squared:  0.4938,\tAdjusted R-squared:  0.4396  #> F-statistic: 9.105 on 3 and 28 DF,  p-value: 0.0002282 #>   # cleanup rm(cyl4, cyl6, cyl8, G3, G4, G5, model_hp, model_size, model_trans)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/untidyselect.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a tidy selection to a vector of column names — untidyselect","title":"Convert a tidy selection to a vector of column names — untidyselect","text":"Returns column names selected <tidy-select> expression character vector (default) list symbols (syms = TRUE).","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/untidyselect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a tidy selection to a vector of column names — untidyselect","text":"","code":"untidyselect(data, selection, syms = FALSE)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/untidyselect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a tidy selection to a vector of column names — untidyselect","text":"","code":"dplyr::storms %>%   untidyselect(c(name:hour, category, tidyselect::ends_with(\"diameter\"))) #> [1] \"name\"                         \"year\"                         #> [3] \"month\"                        \"day\"                          #> [5] \"hour\"                         \"category\"                     #> [7] \"tropicalstorm_force_diameter\" \"hurricane_force_diameter\"       mtcars %>%    untidyselect(mpg:drat, syms = TRUE) #> [[1]] #> mpg #>  #> [[2]] #> cyl #>  #> [[3]] #> disp #>  #> [[4]] #> hp #>  #> [[5]] #> drat #>"},{"path":"https://ccsarapas.github.io/lighthouse/reference/winsorize.html","id":null,"dir":"Reference","previous_headings":"","what":"Winsorize extreme values — winsorize","title":"Winsorize extreme values — winsorize","text":"Sets values max_dev deviations center max_dev deviations center. Deviations defined standard deviation (default) mean absolute deviation (method = \"mad\"). Center defined mean method = \"sd\" median method = \"mad\", unless otherwise specified center argument.","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/winsorize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Winsorize extreme values — winsorize","text":"","code":"winsorize(   x,   max_dev = 3,   method = c(\"sd\", \"mad\"),   mad.center = c(\"median\", \"mean\") )"},{"path":"https://ccsarapas.github.io/lighthouse/reference/wkappa.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Cohen's kappa and weighted kappa — wkappa","title":"Compute Cohen's kappa and weighted kappa — wkappa","text":"tidyverse-friendly wrapper around psych::cohen.kappa().","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/wkappa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Cohen's kappa and weighted kappa — wkappa","text":"","code":"wkappa(.data, x, y)"},{"path":"https://ccsarapas.github.io/lighthouse/reference/zap_everything.html","id":null,"dir":"Reference","previous_headings":"","what":"Strip special attributes from SPSS dataset — zap_everything","title":"Strip special attributes from SPSS dataset — zap_everything","text":"Removes special attributes data read SPSS, optionally converting labelled vectors factors .as_factor = TRUE (default).","code":""},{"path":"https://ccsarapas.github.io/lighthouse/reference/zap_everything.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Strip special attributes from SPSS dataset — zap_everything","text":"","code":"zap_everything(.data, ..., .as_factor = TRUE)"},{"path":"https://ccsarapas.github.io/lighthouse/news/index.html","id":"lighthouse-060","dir":"Changelog","previous_headings":"","what":"lighthouse 0.6.0","title":"lighthouse 0.6.0","text":"New functions: group_with_total() count_multiple() count_unique() count_duplicates() cols_info() wkappa() cohen_w() median_dbl() safe_min(), safe_max() pmin_across(), pmax_across() cumsum_desc() scale_vec() reverse_key() add_header() t_tibble() rev_rows() fct_reorder_n() find_na_cols(), drop_na_cols() n_valid(), pct_valid(), n_pct_valid() discard_na() null_to_na() is_valid() str_prefix(), str_suffix() glue_chr() datetimes_to_date() next_bizday() is_duplicate() is_spss() is_coercible_integer(), is_coercible_logical() gain_ss_score() Added datasets federal (holidays_us), Illinois (holidays_il), Chestnut Health Systems (holidays_chestnut) holidays (primarily use withnext_bizday()` function). Added strict argument is_TRUE(), is_FALSE(), is_TRUE_or_NA(), is_FALSE_or_NA() Improvements set_ggplot_opts(), ggview(), is_coercible_numeric() Bugfixes in_excel(), count_na(), summary_table(), pivot_wider_alt(), print_all(), asterisks(), coerce_na_range() Remove check lighthouse updates load","code":""},{"path":"https://ccsarapas.github.io/lighthouse/news/index.html","id":"lighthouse-050","dir":"Changelog","previous_headings":"","what":"lighthouse 0.5.0","title":"lighthouse 0.5.0","text":"Check lighthouse update available load New infix operators: %all_in%, %any_in% Exported na_like()","code":""},{"path":"https://ccsarapas.github.io/lighthouse/news/index.html","id":"lighthouse-041","dir":"Changelog","previous_headings":"","what":"lighthouse 0.4.1","title":"lighthouse 0.4.1","text":"Bugfix print_all()","code":""},{"path":"https://ccsarapas.github.io/lighthouse/news/index.html","id":"lighthouse-040","dir":"Changelog","previous_headings":"","what":"lighthouse 0.4.0","title":"lighthouse 0.4.0","text":"New logical tests: is_TRUE(), is_FALSE(), is_TRUE_or_NA(), is_FALSE_or_NA(), is_coercible_numeric() New count functions: crosstab(), count_na() New data transformations: scale_mad(), winsorize() New date functions: floor_month(), floor_week(), floor_days(), days_diff() new functions: asterisks(), print_n(), print_all(), na_to_null(), set_ggplot_opts() Added added optional name argument in_excel()","code":""}]
