% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/character.R
\name{str_c_tidy}
\alias{str_c_tidy}
\title{Tidy string concatenation}
\usage{
str_c_tidy(
  ...,
  sep = "",
  collapse = NULL,
  na.rm = FALSE,
  if_all_na = c("empty", "NA")
)
}
\arguments{
\item{...}{<\code{\link[=dplyr_tidy_select]{tidy-select}}> tidyselect expression indicating character columns vectors or columns coercible to character.}

\item{sep}{separator to insert between input vectors.}

\item{collapse}{optional character string to combine results into a single string.}

\item{na.rm}{logical. Remove missing values before concatenating? Treatment
of \code{NA}s is similar to \code{\link[=str_c_narm]{str_c_narm()}} and differs from behavior of
\code{paste()} and \code{stringr::str_c()}. See Details of \code{\link[=str_c_narm]{str_c_narm()}}.}

\item{if_all_na}{what to do if \code{na.rm = TRUE} and \emph{all} values in a row
are \code{NA}. \code{"empty"}, the default, returns an empty string. \code{"NA"} returns
\code{NA}. Ignored if \code{na.rm = FALSE}.}
}
\value{
A character vector.
}
\description{
This function performs a tidyverse-friendly string concatenation. It takes a data frame or tibble and a selection of columns, concatenates the string values in each row, and returns the concatenated strings as a vector.
}
\examples{
df <- tibble::tribble(
  ~x, ~y, ~z,
  "a", "b", "c",
  "d", NA, "f",
  "g", "h", NA
)

df \%>\% dplyr::mutate(combined = str_c_tidy(x:z))
df \%>\% dplyr::mutate(combined = str_c_tidy(x:z, na.rm = TRUE))

}
\seealso{
{
\code{\link{str_c_narm}}
}
}
