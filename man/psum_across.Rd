% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/math.R
\name{psum_across}
\alias{psum_across}
\alias{pmean_across}
\alias{pmin_across}
\alias{pmax_across}
\title{tidyselect-friendly row-wise aggregation}
\usage{
psum_across(..., na.rm = FALSE)

pmean_across(..., na.rm = FALSE)

pmin_across(..., na.rm = FALSE)

pmax_across(..., na.rm = FALSE)
}
\arguments{
\item{...}{<\code{\link[=dplyr_tidy_select]{tidy-select}}> one or more tidyselect
expressions that capture numeric and/or logical columns.}

\item{na.rm}{Should missing values (including \code{NaN}) be removed?}
}
\description{
Wrappers around \code{base::pmin()}, \code{base::pmax()}, \code{lighthouse::psum()}, and
\code{lighthouse::pmean()} that accept
\code{\link[=dplyr_tidy_select]{tidyselect expressions}}.
}
\details{
Lighthouse includes two sets of functions for computing "parallel" or
row-wise aggregates:
\itemize{
\item \code{\link[=psum]{psum()}} and \code{\link[=pmean]{pmean()}} (which complement \code{base::pmin()} and \code{pmax()})
\item \code{pmin_across()}, \code{pmax_across()}, \code{psum_across()}, and \code{pmean_across()}
}

Both sets of functions differ from \code{base::rowSums()} and \code{rowMeans()} in that
they:
\itemize{
\item work in data-masking contexts (e.g., inside \code{dplyr::mutate()}) without
needing helpers like \code{dplyr::pick()} or \code{dplyr::across()}.
\item accept multiple inputs via \code{...}.
\item return \code{NA} when \code{na.rm = TRUE} and all values in a row are \code{NA}. This
mirrors behavior of \code{base::pmin()} and \code{pmax()}, but differs from
\code{rowSums()}, which returns \code{0} in this situation.
}

\code{psum_across()} and friends support tidyselect expressions; e.g.,
\preformatted{
dat %>%
  mutate(
    IDScrTotal = psum_across(IDScr1:IDScr6),
    SDScrTotal = psum_across(starts_with("SDScr"))
  )
}

...but must be used inside a data-masking verb like \code{dplyr::mutate()},
\code{group_by()}, or \code{filter()}, and do not support implicit computations.

Conversely, \code{psum()} and friends do not support tidyselect expressions, but
can be used both inside or outside a data-masking context:
\preformatted{
# data-masking
dat %>%
  mutate(
    NumColors = psum(Red, Blue, Green),
  )

#non-data masking
psum(1:10, 6:15, 11:20)
}

and support "on the fly" or "implicit" computations:
\preformatted{
dat %>%
  mutate(
    CriteriaMet = psum(a1 > a2, pmax(b1, b2, b3) > 5, c1 < 10),
    TotalProp = psum(num1 / denom1, num2 / denom2, num3 / denom3)
  )
}
}
\examples{
dat <- tibble::tribble(
  ~product,    ~price1, ~price2, ~price3,
  "Product 1", 20,      25,      22,
  "Product 2", NA,      30,      29,
  "Product 3", 15,      NA,      NA,
  "Product 4", NA,      NA,      NA
)

price_cols <- c("price1", "price2", "price3")

dat \%>\%
  dplyr::mutate(
    min = pmin_across(price1, price2, price3, na.rm = TRUE),
    max = pmax_across(price1:price3, na.rm = TRUE),
    sum = psum_across(starts_with("price"), na.rm = TRUE),
    mean = pmean_across(all_of(price_cols), na.rm = TRUE)
  )

}
\seealso{
\code{\link[=psum]{psum()}} and \code{\link[=pmax]{pmax()}} for non-tidyselect parallel aggregates.
}
